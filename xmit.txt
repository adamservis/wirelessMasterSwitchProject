/*
 Copyright (C) 2011 J. Coliz <maniacbug@ymail.com>

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 version 2 as published by the Free Software Foundation.
 */

#include <SPI.h>
#include "nRF24L01.h"
#include "RF24.h"
#include "printf.h"
#include <avr/wdt.h>
//
// Hardware configuration
//

// Set up nRF24L01 radio on SPI bus plus pins 9 & 10

RF24 radio(9,10);

// sets the role of this unit in hardware.  Connect to GND to be the 'pong' receiver
// Leave open to be the 'ping' transmitter
//********************************
//* REMOVING ROLE
//const int role_pin = 7;
//********************************
//TODO designate led pin

//
// Topology
//

// Radio pipe addresses for the 2 nodes to communicate.
const uint64_t pipes[2] = { 0xF0F0F0F0E1LL, 0xF0F0F0F0D2LL };

//
// Role management
//
// Set up role.  This sketch uses the same software for all the nodes
// in this system.  Doing so greatly simplifies testing.  The hardware itself specifies
// which node it is.
//
// This is done through the role_pin
//

// The various roles supported by this sketch
// 12/1 typedef enum { role_ping_out = 1, role_pong_back } role_e;

// The debug-friendly names of those roles
// 12/1 const char* role_friendly_name[] = { "invalid", "Ping out", "Pong back"};

// The role of the current running sketch
// 12/1 role_e role;

 

    //****************************
    //* toggle CODE ADDTION 12/1
    int buttonPin = 4;
    //****************************
    
    //12/1 value to store toggle value
    int toggle = 0;
    // message sent to partner
    unsigned long time = 1;

void setup(void)
{

 

  //****************************
  //* BUZZ CODE ADDTION
  pinMode(buttonPin, INPUT);
  //****************************

  //role = role_ping_out;
  //
  //12/1 role = role_pong_back;

  Serial.begin(57600);
  // 12/1 printf_begin();
  // 12/1 printf("\n\rRF24/examples/pingpair/\n\r");


  radio.begin();

  // optionally, increase the delay between retries & # of retries
  radio.setRetries(15,15);

  // optionally, reduce the payload size.  seems to
  // improve reliability
  // 12/1 setPayloadSize(uint8_t) uint8_t is an 8 bit unsigned integer so 8 bytes
  radio.setPayloadSize(8);

  //
  // Open pipes to other nodes for communication
  //

  // This simple sketch opens two pipes for these two nodes to communicate
  // back and forth.
  // Open 'our' pipe for writing
  // Open the 'other' pipe for reading, in position #1 (we can have up to 5 pipes open for reading)
  //12/1 MAY CAUSE SHIT
  radio.openWritingPipe(pipes[0]);
  radio.openReadingPipe(1,pipes[1]);
  
  /*
  if ( role == role_ping_out )
  {
    radio.openWritingPipe(pipes[0]);
    radio.openReadingPipe(1,pipes[1]);
  }
  else
  {
    radio.openWritingPipe(pipes[1]);
    radio.openReadingPipe(1,pipes[0]);
  }
  */
  //
  // Start listening
  //

 
  // 12/1 can probably go
  radio.startListening();

  //
  // Dump the configuration of the rf unit for debugging
  //

  radio.printDetails();
}

void loop(void)
{
  //
  // Ping out role.  Repeatedly send the current time
  //
    
    // First, stop listening so we can talk.
    // 12/1 can probably go
    radio.stopListening();
    //if button is pushed, do stuff
    toggle = digitalRead(buttonPin);
    
    // Take the time, and send it.  This will block until complete
    // modified unsigned long time = millis(); 12/1
    
    if (toggle == HIGH) {
      
      printf("Now sending %lu...",time);
      bool ok = radio.write( &time, sizeof(unsigned long) );
    
      if (ok)
        printf("ok...");
      else
        printf("failed.\n\r");


      // delay 1s negate button spam
      delay(1000);
    }

}